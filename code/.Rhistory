options(width = 100)
library(HilbertCurve)
path = "x_疾病类型：Cholangiocarcinoma (36).csv"
lines <- readLines("排序(列名).txt")
data = read.csv(path, row.names = 1)
data <- df[, new_order]
path = "x_疾病类型：Cholangiocarcinoma (36).csv"
lines <- readLines("排序(列名).txt")
data = read.csv(path, row.names = 1)
data <- df[, lines]
path = "x_疾病类型：Cholangiocarcinoma (36).csv"
lines <- readLines("排序(列名).txt")
#data = read.csv(path, row.names = 1)
#data <- df[, lines]
#data
path = "x_疾病类型：Cholangiocarcinoma (36).csv"
lines <- readLines("排序(列名).txt")
lines
#data = read.csv(path, row.names = 1)
#data <- df[, lines]
#data
path = "x_疾病类型：Cholangiocarcinoma (36).csv"
lines <- readLines("排序(列名).txt")
data = read.csv(path, row.names = 1)
data <- data[, lines]
data
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "red"))
df = as.matrix(data)
row_name = rownames(data)
color = (df[1,] - mean(df[1, ])) / max(df[1, ]- min(df[1, ]))
color = as.matrix(color)
start = (df[1,]) / sum(df[1,]) * (256^4)
end = cumsum(start)
png("plot.png")
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "red"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - mean(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "red"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - mean(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
library(markdown)
options(markdown.HTML.options = c(options('markdown.HTML.options')[[1]], "toc"))
library(knitr)
knitr::opts_chunk$set(
error = FALSE,
tidy  = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 6,
fig.height = 6)
options(markdown.HTML.stylesheet = "custom.css")
options(width = 100)
library(HilbertCurve)
library(GenomicRanges)
library(HilbertCurve)
library(circlize)
load(system.file("extdata", "refseq_chr1.RData", package = "HilbertCurve"))
hc = GenomicHilbertCurve(chr = "chr1", level = 5, reference = TRUE,
reference_gp = gpar(lty = 1, col = "grey"), arrow = FALSE)
hc_segments(hc, g, gp = gpar(lwd = 6, col = rand_color(length(g))))
# for generating the legend
library(ComplexHeatmap)
lgd = Legend(col_fun = colorRamp2(c(0, 1), c("yellow", "red")),
title = "Conservation",
at = c(0, 0.2, 0.4, 0.6, 0.8, 1),
labels = c("0%", "20%", "40%", "60%", "80%", "100%"))
chr1_len = 249250621
load(system.file("extdata", "mouse_net.RData", package = "HilbertCurve"))
seqlengths(mouse) = chr1_len # it is only used to extract the complement
nonmouse = gaps(mouse); nonmouse = nonmouse[strand(nonmouse) == "*"]
gr = c(mouse, nonmouse)
col = c(rep("red", length(mouse)), rep("yellow", length(nonmouse)))
hc = GenomicHilbertCurve(chr = "chr1", level = 6,
title = "Conservation between mouse and human on chr1",
legend = lgd)
hc_points(hc, gr, np = 3, gp = gpar(col = NA, fill = col))
load(system.file("extdata", "zebrafish_net.RData", package = "HilbertCurve"))
seqlengths(zebrafish) = chr1_len
nonzebrafish = gaps(zebrafish); nonzebrafish = nonzebrafish[strand(nonzebrafish) == "*"]
gr = c(zebrafish, nonzebrafish)
col = c(rep("red", length(zebrafish)), rep("yellow", length(nonzebrafish)))
hc = GenomicHilbertCurve(chr = "chr1", level = 6,
title = "Conservation between zebrafish and human on chr1",
legend = lgd)
hc_points(hc, gr, np = 3, gp = gpar(col = NA, fill = col))
cat("<p><center><img src='gc_percent_chr1_points.png' /></center></p>\n")
cat("<p><center><img src='gc_percent_chr1.png' /></center></p>\n")
cat("<p><center><img src='gc_percent_half_chr1.png' /></center></p>\n")
library(GetoptLong)
plot_histone_mark = function(mark) {
df = read.table(pipe(qq("awk '$5>0 && $1==\"chr1\"' ~/HilbertCurveTest/UCSD.Lung.@{mark}.STL002.bed")),
sep = "\t")
col_fun = colorRamp2(c(0, quantile(df[[5]], 0.99)), c("white", "red"))
lgd1 = Legend(col_fun = col_fun, title = "Intensity")
lgd2 = Legend(labels = c(mark, "gene"), legend_gp = gpar(fill = c("#FF0000", "#CCCCCC")),
title = "Layer")
hc = GenomicHilbertCurve(chr = "chr1", level = 9, mode = "pixel",
title = qq("Intensity of @{mark} mark on chr1"), legend = list(lgd1, lgd2))
hc_layer(hc, df, col = col_fun(df[[5]]))
hc_layer(hc, reduce(g), col = "#00000010")
}
cat("<p><center><img src='H3K27ac_chr1.png' /></center></p>\n")
cat("<p><center><img src='H3K36me3_chr1.png' /></center></p>\n")
cat("<p><center><img src='H3K4me3_chr1.png' /></center></p>\n")
cat("<p><center><img src='H3K9me3_chr1.png' /></center></p>\n")
cat("<p><center><img src='H3K36me3_chr1_overlap.png' /></center></p>\n")
cat("<p><center><img src='methylation_chr1.png' /></center></p>\n")
cat("<p><center><img src='cnv_all_chromosomes.png' /></center></p>\n")
cat("<p><center><img src='map_all_chromosomes.png' /></center></p>\n")
cat("<p><center><img src='cnv_all_chromosomes_overlay.png' /></center></p>\n")
cat("<p><center><img src='cnv_all_chromosomes_border.png' /></center></p>\n")
cat("<p><center><img src='cnv_compare.png' /></center></p>\n")
sessionInfo()
library(markdown)
options(markdown.HTML.options = c(options('markdown.HTML.options')[[1]], "toc"))
library(knitr)
knitr::opts_chunk$set(
error = FALSE,
tidy  = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 6,
fig.height = 6)
options(markdown.HTML.stylesheet = "custom.css")
options(width = 100)
library(HilbertCurve)
library(HilbertCurve)
library(circlize)
library(readr)
library(HilbertVis)
library(ComplexHeatmap)
set.seed(12345)
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "red"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - mean(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "black"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - mean(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
#col_fun = colorRamp2(c(0, 1), c("white", "black"))
col = rainbow(85)
color <- data.frame(t(col), stringsAsFactors = FALSE)
names(color) <- col_name
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
col_name <- colnames(data)
data <- data[, lines]
#col_fun = colorRamp2(c(0, 1), c("white", "black"))
col = rainbow(85)
color <- data.frame(t(col), stringsAsFactors = FALSE)
names(color) <- col_name
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - mean(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = color)
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
col_name <- colnames(data)
data <- data[, lines]
#col_fun = colorRamp2(c(0, 1), c("white", "black"))
col = rainbow(85)
color <- data.frame(t(col), stringsAsFactors = FALSE)
names(color) <- col_name
df = as.matrix(data)
row_name = rownames(data)
print(color)
for(item in row_name){
color = (df[item,] - mean(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = color)
dev.off()
}
col_name
col_name
col
(col_name)
(col)
(col_name)
col = as.matrix(col)
col = rainbow(85)
color <- data.frame(t(col), stringsAsFactors = FALSE)
names(color) <- col_name
(color)
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
col_name <- colnames(data)
data <- data[, lines]
#col_fun = colorRamp2(c(0, 1), c("white", "black"))
col = rainbow(85)
color <- data.frame(t(col), stringsAsFactors = FALSE)
names(color) <- col_name
color = as.matrix(color)
df = as.matrix(data)
row_name = rownames(data)
print(color)
for(item in row_name){
color = (df[item,] - mean(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = color)
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36).csv"
library(readr)
#as.matrix
col_name = colnames(data)
col = rainbow(85)
color <- data.frame(t(col), stringsAsFactors = FALSE)
names(color) <- col_name
color = as.matrix(color)
color
data = read.csv(path, row.names = 1)
df = as.matrix(data)
start = (df[1,]) / sum(df[1,]) * (256^4)
end = cumsum(start)
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = color)
library(markdown)
options(markdown.HTML.options = c(options('markdown.HTML.options')[[1]], "toc"))
library(knitr)
knitr::opts_chunk$set(
error = FALSE,
tidy  = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 6,
fig.height = 6)
options(markdown.HTML.stylesheet = "custom.css")
options(width = 100)
library(HilbertCurve)
library(markdown)
options(markdown.HTML.options = c(options('markdown.HTML.options')[[1]], "toc"))
library(knitr)
knitr::opts_chunk$set(
error = FALSE,
tidy  = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 6,
fig.height = 6)
options(markdown.HTML.stylesheet = "custom.css")
options(width = 100)
library(HilbertCurve)
library(markdown)
options(markdown.HTML.options = c(options('markdown.HTML.options')[[1]], "toc"))
library(knitr)
knitr::opts_chunk$set(
error = FALSE,
tidy  = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 6,
fig.height = 6)
options(markdown.HTML.stylesheet = "custom.css")
options(width = 100)
library(HilbertCurve)
library(HilbertCurve)
library(circlize)
library(readr)
library(HilbertVis)
library(ComplexHeatmap)
set.seed(12345)
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create("test",showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white",  "blue"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create("test",showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "blue")))
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create("test",showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "blue")))
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create("test",showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "blue"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - min(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
library(markdown)
options(markdown.HTML.options = c(options('markdown.HTML.options')[[1]], "toc"))
library(knitr)
knitr::opts_chunk$set(
error = FALSE,
tidy  = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 6,
fig.height = 6)
options(markdown.HTML.stylesheet = "custom.css")
options(width = 100)
library(HilbertCurve)
library(HilbertCurve)
library(circlize)
library(readr)
library(HilbertVis)
library(ComplexHeatmap)
set.seed(12345)
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create("test",showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "blue"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - min(df[item, ])) / max(df[item, ]- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create("test",showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "blue"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - min(df[item, ])) / (max(df[item, ])- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "#00008B"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - min(df[item, ])) / (max(df[item, ])- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (256^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 256^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Cholangiocarcinoma (36)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "#00008B"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - min(df[item, ])) / (max(df[item, ])- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (64^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 64^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
path = "x_疾病类型：Breast Invasive Carcinoma (1238)"
lines <- readLines("排序(列名).txt")
dir.create(path,showWarnings = FALSE, recursive = FALSE)
data = read.csv(paste(path, ".csv", sep=""), row.names = 1)
data <- data[, lines]
col_fun = colorRamp2(c(0, 1), c("white", "#00008B"))
df = as.matrix(data)
row_name = rownames(data)
for(item in row_name){
color = (df[item,] - min(df[item, ])) / (max(df[item, ])- min(df[item, ]))
color = as.matrix(color)
start = (df[item,]) / sum(df[item,]) * (32^4)
end = cumsum(start)
png(file.path(path, paste(item,".png",sep="")))
hc = HilbertCurve(0, 32^4, start_from = "topleft", first_seg = "horizontal", mode = "pixel", level = 9)
hc_layer(hc, x1 = start, x2 = end, col = col_fun(color))
dev.off()
}
